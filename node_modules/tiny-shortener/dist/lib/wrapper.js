"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const https_1 = require("https");
const parse_1 = require("./parse");
/**
 * Handles the response from tinyurl
 *
 * @param res Incoming message from the server containing the HTML body
 * @param reject The function to be called when an error occurs
 * @param resolve The function to be called when the response ends
 * @returns Nothing
 */
const handleGet = ({ res, resolve, reject }) => {
    let rawData = '';
    if (200 !== res.statusCode) {
        reject(new Error('Request was not accepted.'));
    }
    res.setEncoding('utf8')
        .on('error', reject)
        .on('uncaughtException', reject)
        .on('data', (chunk) => rawData += chunk)
        .on('end', () => resolve(parse_1.parseResponse(rawData)));
};
/**
 * Handles the request to shorter a URL
 *
 * @param api The api URL end point
 * @param url The URL to be shortened
 * @param alias The provided alias to be used
 * @example
 * wrapper({ api: 'www.foo.com', url: 'bar.com' });
 * @example
 * wrapper({ api: 'www.foo.com', url: 'bar.com', alias: 'baz' });
 * @returns The URL shortened
 * @returns A promise containing the HTML page from tinyurl
 */
exports.getAPI = async ({ api, url, alias }) => {
    return new Promise((resolve, reject) => {
        const parameters = `${parse_1.parseURL(url)}${parse_1.parseAlias(alias)}`;
        const curriedHandleGet = ((res) => handleGet({ res, resolve, reject }));
        https_1.get(`${api}${encodeURI(parameters)}`)
            .on('response', curriedHandleGet)
            .on('error', reject)
            .end();
    });
};
/**
 * Wraps up the request to shorter a URL
 *
 * @param api The api URL end point
 * @param url The URL to be shortened
 * @param alias The provided alias to be used
 * @example
 * wrapper({ api: 'www.foo.com', url: 'bar.com' });
 * @example
 * wrapper({ api: 'www.foo.com', url: 'bar.com', alias: 'baz' });
 * @returns The URL shortened
 */
exports.wrapper = async ({ api, url, alias }) => {
    return new Promise((resolve, reject) => {
        if ('string' !== typeof (url)) {
            reject(new TypeError(`Wrong parameter type: ${typeof (url)}. String was expected.`));
        }
        if (undefined !== typeof (url) && null !== typeof (url) && 'string' !== typeof (url)) {
            reject(new TypeError(`Wrong parameter type: ${typeof (url)}. String was expected.`));
        }
        if ('' === alias) {
            reject(new Error('Empty alias parameter is not allowed.'));
        }
        if ('' === url) {
            reject(new Error('Empty link parameter is not allowed.'));
        }
        exports.getAPI({ api, url, alias }).then(resolve).catch(reject);
    });
};
//# sourceMappingURL=wrapper.js.map